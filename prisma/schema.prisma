generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String   @unique
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())

  decks           Deck[]
  loginTokens     LoginToken[]
  RssSubscription RssSubscription[]
  RssImpression   RssImpression[]
  CardImpression  CardImpression[]
  CardDueDate     CardDueDate[]
}

model LoginToken {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  valid     Boolean  @default(true)

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
}

model Deck {
  id        String   @id @default(cuid())
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())

  name  String
  cards Card[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model Card {
  id        String   @id @default(cuid())
  front     String
  back      String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())

  deck        Deck             @relation(fields: [deckId], references: [id])
  deckId      String
  impressions CardImpression[]
  CardDueDate CardDueDate[]
}

model CardImpression {
  id         String   @id @default(cuid())
  date       DateTime @default(now())
  timeSpent  Float
  resolution String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  card   Card   @relation(fields: [cardId], references: [id])
  cardId String
}

model CardDueDate {
  id  String   @id @default(cuid())
  due DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  card   Card   @relation(fields: [cardId], references: [id])
  cardId String
}

model RssSubscription {
  id      String  @id @default(cuid())
  deleted Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  feed   RssFeed @relation(fields: [feedId], references: [id])
  feedId String
}

model RssFeed {
  id              String            @id @default(cuid())
  rssUrl          String            @unique
  title           String            @default("")
  lastSync        DateTime
  RssSubscription RssSubscription[]
  RssItem         RssItem[]
}

model RssItem {
  id       String   @id @default(cuid())
  title    String
  link     String
  content  String
  pubDate  DateTime
  remoteId String

  impressions RssImpression[]

  feed   RssFeed @relation(fields: [feedId], references: [id])
  feedId String
}

model RssImpression {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  rssItemId String
  rssItem   RssItem @relation(fields: [rssItemId], references: [id])
}
