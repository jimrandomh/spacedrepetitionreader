generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String    @unique
  email          String    @unique
  passwordHash   String?
  createdAt      DateTime  @default(now())
  isAdmin        Boolean   @default(false)
  emailVerified  Boolean   @default(false)
  lastRemindedAt DateTime?
  config         Json

  decks           Deck[]
  loginTokens     LoginToken[]
  RssSubscription RssSubscription[]
  RssImpression   RssImpression[]
  CardImpression  CardImpression[]
  CardDueDate     CardDueDate[]
  EmailToken      EmailToken[]
  fileUploads     FileUpload[]
  CardRevision    CardRevision[]

  @@index([name])
  @@index([email])
}

//}}}

model LoginToken {
  id        String   @id @default(cuid())
  tokenHash String   @unique
  createdAt DateTime @default(now())
  valid     Boolean  @default(true)

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  @@index([tokenHash])
}

//}}}

model EmailToken {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  usedAt    DateTime?
  type      String
  tokenHash String    @unique

  userId String
  owner  User   @relation(fields: [userId], references: [id])

  @@index([tokenHash])
}

//}}}

model Deck {
  id        String   @id @default(cuid())
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  config    Json     @default("{}")

  name        String
  description String @default("")
  cards       Card[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@index([authorId])
}

//}}}

model Card {
  id        String   @id @default(cuid())
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())

  deck             Deck             @relation(fields: [deckId], references: [id])
  deckId           String
  impressions      CardImpression[]
  CardDueDate      CardDueDate[]
  AllRevisions     CardRevision[]   @relation("AllRevisions")
  activeRevisionId String?
  activeRevision   CardRevision?     @relation("activeRevision", fields: [activeRevisionId], references: [id])

  @@index([deckId])
}

//}}}

model CardRevision {
  id         String   @id @default(cuid())
  deleted    Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  card       Card     @relation("AllRevisions", fields: [cardId], references: [id])
  activeCard Card[]   @relation("activeRevision")
  cardId     String
  front      String
  back       String
}

//}}}

model CardImpression {
  id         String   @id @default(cuid())
  date       DateTime @default(now())
  timeSpent  Float
  resolution String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  card   Card   @relation(fields: [cardId], references: [id])
  cardId String

  @@index([userId])
  @@index([cardId])
}

//}}}

model CardDueDate {
  id  String   @id @default(cuid())
  due DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String

  card   Card   @relation(fields: [cardId], references: [id])
  cardId String

  @@index([userId, due])
  @@index([cardId, userId])
}

//}}}

model RssSubscription {
  id      String  @id @default(cuid())
  deleted Boolean @default(false)
  config  Json

  user   User   @relation(fields: [userId], references: [id])
  userId String

  feed   RssFeed @relation(fields: [feedId], references: [id])
  feedId String

  @@index([userId])
  @@index([feedId])
}

//}}}

model RssFeed {
  id              String            @id @default(cuid())
  rssUrl          String            @unique
  title           String            @default("")
  lastSync        DateTime
  RssSubscription RssSubscription[]
  RssItem         RssItem[]

  @@index([rssUrl])
}

//}}}

model RssItem {
  id       String   @id @default(cuid())
  title    String
  link     String
  content  String
  pubDate  DateTime
  remoteId String

  impressions RssImpression[]

  feed   RssFeed @relation(fields: [feedId], references: [id])
  feedId String

  @@index([feedId, pubDate])
}

//}}}

model RssImpression {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  rssItemId String
  rssItem   RssItem @relation(fields: [rssItemId], references: [id])

  @@index([userId, rssItemId])
}

//}}}

model CronHistory {
  // key is {name}-{intendedAt}. intendedAt is when this job ran, according to
  // the schedule, in milliseconds-since-1970. This is an idealized time, not
  // including any small delay before start, and is used as a key to prevent
  // multiple servers connected to the same DB from running the same job.
  key String @id

  intendedAt BigInt

  // When this actually started (possibly including a small delay)
  startedAt DateTime

  // If this finished, when it did so
  finishedAt DateTime?

  // If an exception was thrown while running this, the exception, stringified
  error String?
}

//}}}

model FileUpload {
  id        String   @id @default(cuid())
  filename  String
  sha256sum String
  createdAt DateTime @default(now())

  // String-enum describing the purpose of this upload. Valid values: "import".
  uploadType String

  importFinished Boolean @default(false)

  uploaderUserId String
  uploader       User   @relation(fields: [uploaderUserId], references: [id])

  @@index([sha256sum])
  @@index([uploaderUserId])
}

model UploadedFileBody {
  sha256sum String @id
  contents  Bytes
}
